{"version":3,"sources":["index.js"],"names":["Square","value","onClick","background","className","style","Board","i","this","props","causeWin","j","length","squares","board","rowNumber","row","colNumber","push","renderSquare","React","Component","Game","state","history","Array","SizeBoard","fill","location","col","stepNumber","IsAscending","xIsNext","slice","calculateWinner","setState","concat","Math","floor","step","status","current","winner","moves","map","move","desc","jumpTo","sortOrder","temp","player","cause","checkFullBoard","handleClick","toggle","winSquareNumber","count","nextCol","nextRow","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dfd3a311.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n\r\nfunction Square({value, onClick, background}) {\r\n    return (\r\n        <button className=\"square\" onClick={() => onClick()} style={background}>\r\n            {value}\r\n        </button>\r\n    );\r\n}\r\n\r\nclass Board extends React.Component {\r\n    renderSquare(i) {\r\n        let background = {background: \"white\"};\r\n        if(this.props.causeWin)\r\n        {\r\n            for(let j = 0; j < this.props.causeWin.length; j++)\r\n            {\r\n                if(i === this.props.causeWin[j])\r\n                {\r\n                    background = {background: \"yellow\"}\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return <Square value={this.props.squares[i]} onClick={() => this.props.onClick(i)} background={background}/>;\r\n    }\r\n  \r\n    render() {\r\n        const board = [];\r\n        for(let i = 0; i < this.props.rowNumber; i++)\r\n        {\r\n            const row = [];\r\n            for(let j  = 0; j < this.props.colNumber; j++)\r\n            {\r\n                row.push(this.renderSquare(i * this.props.colNumber + j));\r\n            }\r\n            board.push(<div className=\"board-row\">{row}</div>)\r\n        }\r\n\r\n        return (\r\n            <div>{board}</div>\r\n        );\r\n    }\r\n}\r\n  \r\nclass Game extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(this.props.SizeBoard * this.props.SizeBoard).fill(null),\r\n                location: {col: null, row: null},\r\n            }],\r\n            stepNumber: 0,\r\n            IsAscending: true,\r\n            xIsNext: true,\r\n        };\r\n    }\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n\r\n        if (calculateWinner(squares, this.props.SizeBoard) || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares: squares,\r\n                location: {col: (i % this.props.SizeBoard) + 1, row: Math.floor(i / this.props.SizeBoard) + 1 }\r\n            }]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext,\r\n        });\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0,\r\n        });\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            IsAscending: !this.state.IsAscending,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares, this.props.SizeBoard);\r\n\r\n        const moves = history.map((step, move) => {\r\n            const desc = move ?\r\n                'Go to move #' + move + \" (\" + step.location.col + \", \" + step.location.row + \")\":\r\n                'Go to game start';\r\n            \r\n            if(move === this.state.stepNumber)\r\n            {\r\n                return(\r\n                    <li key={move}>\r\n                        <button onClick={() => this.jumpTo(move)}> <b>{desc}</b> </button>\r\n                    </li>\r\n                )\r\n            }\r\n            else\r\n            {\r\n                return (\r\n                    <li key={move}>\r\n                        <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n                    </li>\r\n                );\r\n            }\r\n        });\r\n\r\n        let sortOrder = \"descending\";\r\n        if(!this.state.IsAscending)\r\n        {\r\n            sortOrder = \"ascending\";\r\n            for(let i = 0; i < moves.length / 2; i++)\r\n            {\r\n                const temp = moves[i];\r\n                moves[i] = moves[moves.length - 1 - i];\r\n                moves[moves.length - 1 - i] = temp;\r\n            }\r\n        }\r\n\r\n        let status;\r\n        let causeWin;\r\n        if (winner) {\r\n            status = 'Winner: ' + winner.player;\r\n            causeWin = winner.cause;\r\n        }\r\n        else {\r\n            if(checkFullBoard(current.squares))\r\n            {\r\n                status = 'Result: Draw';\r\n            }\r\n            else\r\n            {\r\n                status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n            }\r\n            causeWin = null;\r\n        }\r\n\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board\r\n                        squares={current.squares}\r\n                        onClick={(i) => this.handleClick(i)}\r\n                        rowNumber={this.props.SizeBoard}\r\n                        colNumber={this.props.SizeBoard}\r\n                        causeWin = {causeWin}\r\n                    />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{status}</div>\r\n                    <button onClick={() => this.toggle()}>Sort in {sortOrder} order</button>\r\n                    <ol>{moves}</ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n  \r\n  // ========================================\r\n  \r\nReactDOM.render(\r\n    <Game SizeBoard={3}/>,\r\n    document.getElementById('root')\r\n);\r\n\r\nfunction calculateWinner(squares, SizeBoard) {\r\n    if(SizeBoard === 1)\r\n    {\r\n        if(squares[0])\r\n            return {player: squares[0], cause: [0]};\r\n        else\r\n            return null;\r\n    }\r\n\r\n    let winSquareNumber;\r\n    if(SizeBoard <= 5)\r\n        winSquareNumber = SizeBoard;\r\n    else\r\n        winSquareNumber = 5;\r\n    \r\n    //Check in row\r\n    for(let row = 0; row < SizeBoard; row++)\r\n    {\r\n        for(let col = 0; col <= (SizeBoard - winSquareNumber); col++)\r\n        {\r\n            if(squares[row * SizeBoard + col])\r\n            {\r\n                let count = 1;\r\n                let causeWin = [];\r\n                causeWin.push(row * SizeBoard + col);\r\n\r\n                for(let nextCol = col + 1; nextCol < SizeBoard; nextCol++)\r\n                {\r\n\r\n                    if(squares[row * SizeBoard + col] === squares[row * SizeBoard + nextCol])\r\n                    {\r\n                        count++;\r\n                        causeWin.push(row * SizeBoard + nextCol);\r\n\r\n                        if(count === winSquareNumber)\r\n                        {\r\n                            return {player: squares[row * SizeBoard + col], cause: causeWin};\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        col = nextCol - 1;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //Check in column\r\n    for(let col = 0; col < SizeBoard; col++)\r\n    {\r\n        for(let row = 0; row <= (SizeBoard - winSquareNumber); row++)\r\n        {\r\n            if(squares[row * SizeBoard + col])\r\n            {\r\n                let count = 1;\r\n                let causeWin = [];\r\n                causeWin.push(row * SizeBoard + col);\r\n\r\n                for(let nextRow = row + 1; nextRow < SizeBoard; nextRow++)\r\n                {\r\n\r\n                    if(squares[row * SizeBoard + col] === squares[nextRow * SizeBoard + col])\r\n                    {\r\n                        count++;\r\n                        causeWin.push(nextRow * SizeBoard + col);\r\n\r\n                        if(count === winSquareNumber)\r\n                        {\r\n                            return {player: squares[row * SizeBoard + col], cause: causeWin};\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        row = nextRow - 1;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //Check in diagonal (left to right)\r\n   \r\n    for(let col = 0; col <= (SizeBoard - winSquareNumber); col++)\r\n    {\r\n        for(let row = 0; row <= (SizeBoard - winSquareNumber - col); row++)\r\n        {\r\n            if(squares[row * SizeBoard + col + row])\r\n            {\r\n                let count = 1;\r\n                let causeWin = [];\r\n                causeWin.push(row * SizeBoard + col + row);\r\n\r\n                for(let nextRow = row + 1; nextRow < SizeBoard; nextRow++)\r\n                {\r\n                    if(squares[row * SizeBoard + col + row] === squares[nextRow * SizeBoard + col + nextRow])\r\n                    {\r\n                        count++;\r\n                        causeWin.push(nextRow * SizeBoard + col + nextRow);\r\n\r\n                        if(count === winSquareNumber)\r\n                        {\r\n                            return {player: squares[row * SizeBoard + col + row], cause: causeWin};\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        row = nextRow - 1;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    for(let row = 0; row <= (SizeBoard - winSquareNumber); row++)\r\n    {\r\n        for(let col = 0; col <= (SizeBoard - winSquareNumber - row); col++)\r\n        {\r\n            if(squares[row * SizeBoard + col * SizeBoard + col])\r\n            {\r\n                let count = 1;\r\n                let causeWin = [];\r\n                causeWin.push(row * SizeBoard + col * SizeBoard + col);\r\n\r\n                for(let nextCol = col + 1; nextCol < SizeBoard; nextCol++)\r\n                {\r\n\r\n                    if(squares[row * SizeBoard + col * SizeBoard + col] === squares[row * SizeBoard + nextCol * SizeBoard + nextCol])\r\n                    {\r\n                        count++;\r\n                        causeWin.push(row * SizeBoard + nextCol * SizeBoard + nextCol);\r\n\r\n                        if(count === winSquareNumber)\r\n                        {\r\n                            return {player: squares[row * SizeBoard + col * SizeBoard + col], cause: causeWin};\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        col = nextCol - 1;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //Check in diagonal (right to left)\r\n   \r\n    for(let col = SizeBoard - 1; col >= winSquareNumber - 1; col--)\r\n    {\r\n        for(let row = 0; row <= (SizeBoard - winSquareNumber + col - (SizeBoard - 1)); row++)\r\n        {\r\n            if(squares[row * SizeBoard + col - row])\r\n            {\r\n                let count = 1;\r\n                let causeWin = [];\r\n                causeWin.push(row * SizeBoard + col - row);\r\n\r\n                for(let nextRow = row + 1; nextRow < SizeBoard; nextRow++)\r\n                {\r\n                    if(squares[row * SizeBoard + col - row] === squares[nextRow * SizeBoard + col - nextRow])\r\n                    {\r\n                        count++;\r\n                        causeWin.push(nextRow * SizeBoard + col - nextRow);\r\n\r\n                        if(count === winSquareNumber)\r\n                        {\r\n                            return {player: squares[row * SizeBoard + col - row], cause: causeWin};\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        row = nextRow - 1;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    for(let row = 0; row <= (SizeBoard - winSquareNumber); row++)\r\n    {\r\n        for(let col = SizeBoard - 1; col >= winSquareNumber - 1 + row; col--)\r\n        {\r\n            if(squares[row * SizeBoard + (SizeBoard - 1 - col) * SizeBoard + col])\r\n            {\r\n                let count = 1;\r\n                let causeWin = [];\r\n                causeWin.push(row * SizeBoard + (SizeBoard - 1 - col) * SizeBoard + col);\r\n\r\n                for(let nextCol = col - 1; nextCol >= 0; nextCol--)\r\n                {\r\n\r\n                    if(squares[row * SizeBoard + (SizeBoard - 1 - col) * SizeBoard + col] === squares[row * SizeBoard + (SizeBoard - 1 - nextCol) * SizeBoard + nextCol])\r\n                    {\r\n                        count++;\r\n                        causeWin.push(row * SizeBoard + (SizeBoard - 1 - nextCol) * SizeBoard + nextCol);\r\n\r\n                        if(count === winSquareNumber)\r\n                        {\r\n                            return {player: squares[row * SizeBoard + (SizeBoard - 1 - col) * SizeBoard + col], cause: causeWin};\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        col = nextCol + 1;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction checkFullBoard(squares) {\r\n    for(let i = 0; i < squares.length; i++)\r\n    {\r\n        if(squares[i])\r\n        {\r\n            continue;\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}"],"sourceRoot":""}