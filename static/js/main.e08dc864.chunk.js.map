{"version":3,"sources":["index.js"],"names":["Square","value","onClick","background","className","style","Board","i","this","props","causeWin","j","length","squares","board","rowNumber","row","colNumber","push","renderSquare","React","Component","Game","state","history","Array","fill","location","col","stepNumber","IsAscending","SizeBoard","xIsNext","slice","calculateWinner","setState","concat","Math","floor","step","event","target","undefined","parseInt","status","current","winner","moves","map","move","desc","jumpTo","sortOrder","temp","player","cause","checkFullBoard","handleClick","for","type","id","name","min","onChange","changeSizeBoard","toggle","winSquareNumber","count","nextCol","nextRow","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e08dc864.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square({value, onClick, background}) {\r\n    return (\r\n        <button className=\"square\" onClick={() => onClick()} style={background}>\r\n            {value}\r\n        </button>\r\n    );\r\n}\r\n\r\nclass Board extends React.Component {\r\n    renderSquare(i) {\r\n        let background = {background: \"white\"};\r\n        if(this.props.causeWin)\r\n        {\r\n            for(let j = 0; j < this.props.causeWin.length; j++)\r\n            {\r\n                if(i === this.props.causeWin[j])\r\n                {\r\n                    background = {background: \"yellow\"}\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return <Square value={this.props.squares[i]} onClick={() => this.props.onClick(i)} background={background}/>;\r\n    }\r\n  \r\n    render() {\r\n        const board = [];\r\n        for(let i = 0; i < this.props.rowNumber; i++)\r\n        {\r\n            const row = [];\r\n            for(let j  = 0; j < this.props.colNumber; j++)\r\n            {\r\n                row.push(this.renderSquare(i * this.props.colNumber + j));\r\n            }\r\n            board.push(<div className=\"board-row\">{row}</div>)\r\n        }\r\n\r\n        return (\r\n            <div>{board}</div>\r\n        );\r\n    }\r\n}\r\n  \r\nclass Game extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(3 * 3).fill(null),\r\n                location: {col: null, row: null},\r\n            }],\r\n            stepNumber: 0,\r\n            IsAscending: true,\r\n            SizeBoard: 3,\r\n            xIsNext: true,\r\n        };\r\n    }\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n\r\n        if (calculateWinner(squares, this.state.SizeBoard) || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares: squares,\r\n                location: {col: (i % this.state.SizeBoard) + 1, row: Math.floor(i / this.state.SizeBoard) + 1 }\r\n            }]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext,\r\n        });\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0,\r\n        });\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            IsAscending: !this.state.IsAscending,\r\n        })\r\n    }\r\n\r\n    changeSizeBoard(event)\r\n    {\r\n        if(event.target.value !== null && event.target.value !== \"\" && event.target.value !== undefined)\r\n        {\r\n            this.setState({\r\n                history: [{\r\n                    squares: Array(parseInt(event.target.value) * parseInt(event.target.value)).fill(null),\r\n                    location: {col: null, row: null},\r\n                }],\r\n                stepNumber: 0,\r\n                IsAscending: true,\r\n                SizeBoard: parseInt(event.target.value),\r\n                xIsNext: true,\r\n            })\r\n        }\r\n        else\r\n        {\r\n            this.setState({\r\n                history: [{\r\n                    squares: Array(0).fill(null),\r\n                    location: {col: null, row: null},\r\n                }],\r\n                stepNumber: 0,\r\n                IsAscending: true,\r\n                SizeBoard: 0,\r\n                xIsNext: true,\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares, this.state.SizeBoard);\r\n\r\n        const moves = history.map((step, move) => {\r\n            const desc = move ?\r\n                'Go to move #' + move + \" (\" + step.location.col + \", \" + step.location.row + \")\":\r\n                'Go to game start';\r\n            \r\n            if(move === this.state.stepNumber)\r\n            {\r\n                return(\r\n                    <li key={move}>\r\n                        <button onClick={() => this.jumpTo(move)}> <b>{desc}</b> </button>\r\n                    </li>\r\n                )\r\n            }\r\n            else\r\n            {\r\n                return (\r\n                    <li key={move}>\r\n                        <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n                    </li>\r\n                );\r\n            }\r\n        });\r\n\r\n        let sortOrder = \"descending\";\r\n        if(!this.state.IsAscending)\r\n        {\r\n            sortOrder = \"ascending\";\r\n            for(let i = 0; i < moves.length / 2; i++)\r\n            {\r\n                const temp = moves[i];\r\n                moves[i] = moves[moves.length - 1 - i];\r\n                moves[moves.length - 1 - i] = temp;\r\n            }\r\n        }\r\n\r\n        let status;\r\n        let causeWin;\r\n        if (winner) {\r\n            status = 'Winner: ' + winner.player;\r\n            causeWin = winner.cause;\r\n        }\r\n        else {\r\n            if(checkFullBoard(current.squares))\r\n            {\r\n                status = 'Result: Draw';\r\n            }\r\n            else\r\n            {\r\n                status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n            }\r\n            causeWin = null;\r\n        }\r\n\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board\r\n                        squares={current.squares}\r\n                        onClick={(i) => this.handleClick(i)}\r\n                        rowNumber={this.state.SizeBoard}\r\n                        colNumber={this.state.SizeBoard}\r\n                        causeWin = {causeWin}\r\n                    />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{status}</div>\r\n\r\n                    <div className=\"input-size-board\">\r\n                        <label for=\"sizeboard\">Size of board: </label>\r\n                        <input type=\"number\" id=\"sizeboard\" name=\"sizeboard\" min=\"1\"\r\n                            value={this.state.SizeBoard ? this.state.SizeBoard : null} step=\"1\" onChange={(event) => this.changeSizeBoard(event)}/>\r\n                    </div>\r\n\r\n                    <button onClick={() => this.toggle()}>Sort in {sortOrder} order</button>\r\n                    <ol>{moves}</ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n  \r\n  // ========================================\r\n  \r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n\r\nfunction calculateWinner(squares, SizeBoard) {\r\n    if(SizeBoard < 1)\r\n        return null;\r\n        \r\n    if(SizeBoard === 1)\r\n    {\r\n        if(squares[0])\r\n            return {player: squares[0], cause: [0]};\r\n        else\r\n            return null;\r\n    }\r\n\r\n    let winSquareNumber;\r\n    if(SizeBoard <= 5)\r\n        winSquareNumber = SizeBoard;\r\n    else\r\n        winSquareNumber = 5;\r\n    \r\n    //Check in row\r\n    for(let row = 0; row < SizeBoard; row++)\r\n    {\r\n        for(let col = 0; col <= (SizeBoard - winSquareNumber); col++)\r\n        {\r\n            if(squares[row * SizeBoard + col])\r\n            {\r\n                let count = 1;\r\n                let causeWin = [];\r\n                causeWin.push(row * SizeBoard + col);\r\n\r\n                for(let nextCol = col + 1; nextCol < SizeBoard; nextCol++)\r\n                {\r\n\r\n                    if(squares[row * SizeBoard + col] === squares[row * SizeBoard + nextCol])\r\n                    {\r\n                        count++;\r\n                        causeWin.push(row * SizeBoard + nextCol);\r\n\r\n                        if(count === winSquareNumber)\r\n                        {\r\n                            return {player: squares[row * SizeBoard + col], cause: causeWin};\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        col = nextCol - 1;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //Check in column\r\n    for(let col = 0; col < SizeBoard; col++)\r\n    {\r\n        for(let row = 0; row <= (SizeBoard - winSquareNumber); row++)\r\n        {\r\n            if(squares[row * SizeBoard + col])\r\n            {\r\n                let count = 1;\r\n                let causeWin = [];\r\n                causeWin.push(row * SizeBoard + col);\r\n\r\n                for(let nextRow = row + 1; nextRow < SizeBoard; nextRow++)\r\n                {\r\n\r\n                    if(squares[row * SizeBoard + col] === squares[nextRow * SizeBoard + col])\r\n                    {\r\n                        count++;\r\n                        causeWin.push(nextRow * SizeBoard + col);\r\n\r\n                        if(count === winSquareNumber)\r\n                        {\r\n                            return {player: squares[row * SizeBoard + col], cause: causeWin};\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        row = nextRow - 1;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //Check in diagonal (left to right)\r\n   \r\n    for(let col = 0; col <= (SizeBoard - winSquareNumber); col++)\r\n    {\r\n        for(let row = 0; row <= (SizeBoard - winSquareNumber - col); row++)\r\n        {\r\n            if(squares[row * SizeBoard + col + row])\r\n            {\r\n                let count = 1;\r\n                let causeWin = [];\r\n                causeWin.push(row * SizeBoard + col + row);\r\n\r\n                for(let nextRow = row + 1; nextRow < SizeBoard; nextRow++)\r\n                {\r\n                    if(squares[row * SizeBoard + col + row] === squares[nextRow * SizeBoard + col + nextRow])\r\n                    {\r\n                        count++;\r\n                        causeWin.push(nextRow * SizeBoard + col + nextRow);\r\n\r\n                        if(count === winSquareNumber)\r\n                        {\r\n                            return {player: squares[row * SizeBoard + col + row], cause: causeWin};\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        row = nextRow - 1;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    for(let row = 0; row <= (SizeBoard - winSquareNumber); row++)\r\n    {\r\n        for(let col = 0; col <= (SizeBoard - winSquareNumber - row); col++)\r\n        {\r\n            if(squares[row * SizeBoard + col * SizeBoard + col])\r\n            {\r\n                let count = 1;\r\n                let causeWin = [];\r\n                causeWin.push(row * SizeBoard + col * SizeBoard + col);\r\n\r\n                for(let nextCol = col + 1; nextCol < SizeBoard; nextCol++)\r\n                {\r\n\r\n                    if(squares[row * SizeBoard + col * SizeBoard + col] === squares[row * SizeBoard + nextCol * SizeBoard + nextCol])\r\n                    {\r\n                        count++;\r\n                        causeWin.push(row * SizeBoard + nextCol * SizeBoard + nextCol);\r\n\r\n                        if(count === winSquareNumber)\r\n                        {\r\n                            return {player: squares[row * SizeBoard + col * SizeBoard + col], cause: causeWin};\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        col = nextCol - 1;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //Check in diagonal (right to left)\r\n   \r\n    for(let col = SizeBoard - 1; col >= winSquareNumber - 1; col--)\r\n    {\r\n        for(let row = 0; row <= (SizeBoard - winSquareNumber + col - (SizeBoard - 1)); row++)\r\n        {\r\n            if(squares[row * SizeBoard + col - row])\r\n            {\r\n                let count = 1;\r\n                let causeWin = [];\r\n                causeWin.push(row * SizeBoard + col - row);\r\n\r\n                for(let nextRow = row + 1; nextRow < SizeBoard; nextRow++)\r\n                {\r\n                    if(squares[row * SizeBoard + col - row] === squares[nextRow * SizeBoard + col - nextRow])\r\n                    {\r\n                        count++;\r\n                        causeWin.push(nextRow * SizeBoard + col - nextRow);\r\n\r\n                        if(count === winSquareNumber)\r\n                        {\r\n                            return {player: squares[row * SizeBoard + col - row], cause: causeWin};\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        row = nextRow - 1;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    for(let row = 0; row <= (SizeBoard - winSquareNumber); row++)\r\n    {\r\n        for(let col = SizeBoard - 1; col >= winSquareNumber - 1 + row; col--)\r\n        {\r\n            if(squares[row * SizeBoard + (SizeBoard - 1 - col) * SizeBoard + col])\r\n            {\r\n                let count = 1;\r\n                let causeWin = [];\r\n                causeWin.push(row * SizeBoard + (SizeBoard - 1 - col) * SizeBoard + col);\r\n\r\n                for(let nextCol = col - 1; nextCol >= 0; nextCol--)\r\n                {\r\n\r\n                    if(squares[row * SizeBoard + (SizeBoard - 1 - col) * SizeBoard + col] === squares[row * SizeBoard + (SizeBoard - 1 - nextCol) * SizeBoard + nextCol])\r\n                    {\r\n                        count++;\r\n                        causeWin.push(row * SizeBoard + (SizeBoard - 1 - nextCol) * SizeBoard + nextCol);\r\n\r\n                        if(count === winSquareNumber)\r\n                        {\r\n                            return {player: squares[row * SizeBoard + (SizeBoard - 1 - col) * SizeBoard + col], cause: causeWin};\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        col = nextCol + 1;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction checkFullBoard(squares) {\r\n    for(let i = 0; i < squares.length; i++)\r\n    {\r\n        if(squares[i])\r\n        {\r\n            continue;\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}"],"sourceRoot":""}