{"version":3,"sources":["index.js"],"names":["Square","value","onClick","background","className","style","Board","i","this","props","causeWin","j","length","squares","board","rowNumber","row","colNumber","push","renderSquare","React","Component","Game","state","history","Array","fill","location","col","stepNumber","IsAscending","xIsNext","slice","calculateWinner","setState","concat","Math","floor","step","status","current","winner","moves","map","move","desc","jumpTo","sortOrder","temp","player","cause","checkFullBoard","handleClick","toggle","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.29ed52ab.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square({value, onClick, background}) {\r\n    return (\r\n        <button className=\"square\" onClick={() => onClick()} style={background}>\r\n            {value}\r\n        </button>\r\n    );\r\n}\r\n  \r\nclass Board extends React.Component {\r\n    renderSquare(i) {\r\n        let background = {background: \"white\"};\r\n        if(this.props.causeWin)\r\n        {\r\n            for(let j = 0; j < this.props.causeWin.length; j++)\r\n            {\r\n                if(i === this.props.causeWin[j])\r\n                {\r\n                    background = {background: \"yellow\"}\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return <Square value={this.props.squares[i]} onClick={() => this.props.onClick(i)} background={background}/>;\r\n    }\r\n  \r\n    render() {\r\n        const board = [];\r\n        for(let i = 0; i < this.props.rowNumber; i++)\r\n        {\r\n            const row = [];\r\n            for(let j  = 0; j < this.props.colNumber; j++)\r\n            {\r\n                row.push(this.renderSquare(i * this.props.colNumber + j));\r\n            }\r\n            board.push(<div className=\"board-row\">{row}</div>)\r\n        }\r\n\r\n        return (\r\n            <div>{board}</div>\r\n        );\r\n    }\r\n}\r\n  \r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null),\r\n                location: {col: null, row: null},\r\n            }],\r\n            stepNumber: 0,\r\n            IsAscending: true,\r\n            xIsNext: true,\r\n        };\r\n    }\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n\r\n        if (calculateWinner(squares) || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares: squares,\r\n                location: {col: (i % 3) + 1, row: Math.floor(i / 3) + 1 }\r\n            }]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext,\r\n        });\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0,\r\n        });\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            IsAscending: !this.state.IsAscending,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n\r\n        const moves = history.map((step, move) => {\r\n            const desc = move ?\r\n                'Go to move #' + move + \" (\" + step.location.col + \", \" + step.location.row + \")\":\r\n                'Go to game start (col: null, row: null)';\r\n            \r\n            if(move === this.state.stepNumber)\r\n            {\r\n                return(\r\n                    <li key={move}>\r\n                        <button onClick={() => this.jumpTo(move)}> <b>{desc}</b> </button>\r\n                    </li>\r\n                )\r\n            }\r\n            else\r\n            {\r\n                return (\r\n                    <li key={move}>\r\n                        <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n                    </li>\r\n                );\r\n            }\r\n        });\r\n\r\n        let sortOrder = \"descending\";\r\n        if(!this.state.IsAscending)\r\n        {\r\n            sortOrder = \"ascending\";\r\n            for(let i = 0; i < moves.length / 2; i++)\r\n            {\r\n                const temp = moves[i];\r\n                moves[i] = moves[moves.length - 1 - i];\r\n                moves[moves.length - 1 - i] = temp;\r\n            }\r\n        }\r\n\r\n        let status;\r\n        let causeWin;\r\n        if (winner) {\r\n            status = 'Winner: ' + winner.player;\r\n            causeWin = winner.cause;\r\n        }\r\n        else {\r\n            if(checkFullBoard(current.squares))\r\n            {\r\n                status = 'Result: Draw';\r\n            }\r\n            else\r\n            {\r\n                status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n            }\r\n            causeWin = null;\r\n        }\r\n\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board\r\n                        squares={current.squares}\r\n                        onClick={(i) => this.handleClick(i)}\r\n                        rowNumber={3}\r\n                        colNumber={3}\r\n                        causeWin = {causeWin}\r\n                    />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{status}</div>\r\n                    <button onClick={() => this.toggle()}>Sort in {sortOrder} order</button>\r\n                    <ol>{moves}</ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n  \r\n  // ========================================\r\n  \r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return {player: squares[a], cause: [a, b, c]};\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction checkFullBoard(squares) {\r\n    for(let i = 0; i < squares.length; i++)\r\n    {\r\n        if(squares[i])\r\n        {\r\n            continue;\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}"],"sourceRoot":""}